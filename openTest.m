clc; clear all; close all;
import casadi.*

% np = 3;
% T = MX.sym('T',np,1);
% TSum = 0;
% for i = 1 : np
%     TSum = TSum + T(i);
% end
% a = [1,5,1,5]';
% 
% g = {};
% g = {g{:}, T};
% g = {g{:}, T};
% g = {g{:}, T};
% g = {g{:}, a};
% g{:}
% vertcat(g{:})


% ith = SX.sym('ith');
% 
% N = [30;30;30];
% cumuN = [30;60;90];
% 
% 
% F = Function('F', {T}, {T > 0})
% F([0.1;0.1;0.1])
% abs(sum(T))
% 
% R1 = MX.sym('R1',3,3);
% R2 = MX.sym('R2',3,3);
% R1*R2
% R3 = SX.sym('R3',3,3);
% R4 = SX.sym('R4',3,3);
% R3*R4
% E = trace(R4)

% A = [1,2,3;
%      4,5,6;
%      7,8,9];
% res1 = A*A*A;
% disp(res1);
% res2 = A^3;
% disp(res2);

% x = SX.sym('x');
% y = SX.sym('y');
% f_true = Function('f_true',{x,y},{cos(x)+y});
% f_false = Function('f_false',{x,y},{sin(x)+y});
% f_cond = Function.if_else('f_cond', f_true, f_false);
% disp(f_cond);
% f_cond(1,x,y)

% theta = acos((R.trace()-1)/2 );
% skw = (R-transpose(R))/2/sin(theta);
% w = skw.inv_skew(); % is a unit vector
% skew(w*theta)

% v1 = MX.sym('v1',3,1);
% v2 = MX.sym('v2',3,1);
% cross(v1, v2)
% v1.cross(v2)
% v1.*0.5
% 
% v3 = SX.sym('v3',3,1);
% v4 = SX.sym('v4',3,1);
% c = SX.sym('c');
% sg = v3.*c
% cross(v3, v4)
% A = v3.cross(v4)
% B = v3.*0.5
% C = sum(v3)
% D = transpose(v4)

% isvec(v,3)
% skew(v)

% R = SX.sym('R',3,3);
% 
% theta = acos((trace(R)-1)/2);
% f_true = Function('f_true',{R}, ...
%     {zeros(3,3)});
% f_false = Function('f_false',{R}, ...
%     {(R-transpose(R)).*(theta/(2*sin(theta)))});
% f_cond = Function.if_else('f_cond', f_true, f_false);
% skw1 = f_cond(theta==0, R);
% skw2 = f_cond(theta==0, [1,2,3;4,5,6;7,8,9]);
% disp(skw1);
% disp(skw2);
% k = 1;
% R_k = SX.sym('R_k',3,3);
% R_ref = [1,2,3;
%          4,5,6;
%          7,8,9];
% 
% 
% R_arg = SX.sym('R_test',3,3);
% log_map_k = Function.if_else(['log_map_k' num2str(k)], ...
%     Function(['f_true_k' num2str(k)],{R_arg}, {zeros(3,3)}), ...
%     Function(['f_false_k' num2str(k)],{R_arg}, ...
%     {(R_arg-transpose(R_arg)).*(acos((trace(R_arg)-1)/2)/(2*sin(acos((trace(R_arg)-1)/2))))}));
% % Rtmp_k = transpose(R_ref)*R_k;
% theta1 = 0;
% Rtmp_k1 = [cos(deg2rad(theta1)), -sin(deg2rad(theta1)), 0;
%           sin(deg2rad(theta1)), cos(deg2rad(theta1)), 0;
%           0,  0,  1];
% theta2 = 15+2000000000*eps;
% Rtmp_k2 = [cos(deg2rad(theta2)), -sin(deg2rad(theta2)), 0;
%           sin(deg2rad(theta2)), cos(deg2rad(theta2)), 0;
%           0,  0,  1];
% Rtmp_k = transpose(Rtmp_k1)*R_k;
% e_R_k = vex(log_map_k(acos((trace(Rtmp_k)-1)/2)==0, Rtmp_k))
% SO3.rand().R()

% f = Function('f',{R_arg},...
%            {e_R_k});
% disp(f)
% f(R_ref)

% v = [3,51,6,7];
% s = length(v);
% currentIndex = 1;
% a = currentIndex;
% b = currentIndex + s - 1;

r = [1,2,3,4,5,6,7,8,9];
R = transpose(reshape(r,3,3));

% index = SX.sym('index');
% 
% R_arg = SX.sym('R_arg',3,3);
% 
% v = [zeros(3,3);
%     (R_arg-transpose(R_arg)).*...
%     (acos((trace(R_arg)-1)/2)/(2*sin(acos((trace(R_arg)-1)/2))))];
% v_cell = vertsplit(v);
% 
% default = 0;
% c = conditional(index,v_cell,default,false);
% 
% % Test
% log_map_k = Function('log_map_k',{index,R_arg},{c});
% 
% theta1 = 0;
% Rtmp_k1 = [cos(deg2rad(theta1)), -sin(deg2rad(theta1)), 0;
%           sin(deg2rad(theta1)), cos(deg2rad(theta1)), 0;
%           0,  0,  1];
% theta2 = 15;
% Rtmp_k2 = [cos(deg2rad(theta2)), -sin(deg2rad(theta2)), 0;
%           sin(deg2rad(theta2)), cos(deg2rad(theta2)), 0;
%           0,  0,  1];
% Rtmp_k = transpose(Rtmp_k1)*Rtmp_k2;
% log_map_k(acos((trace(Rtmp_k)-1)/2)==0, Rtmp_k)
% e_R_k = vex(log_map_k(acos((trace(Rtmp_k)-1)/2)==0, Rtmp_k))